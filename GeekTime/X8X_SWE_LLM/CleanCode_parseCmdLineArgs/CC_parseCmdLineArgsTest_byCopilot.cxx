// Comment written by EnigmaWU
//    use gtest to test the function CC_parseCmdLineArgs defined in CC_parseCmdLineArgs.h

// Code generated by GitHub Copilot
#include <gtest/gtest.h>

#include "CC_parseCmdLineArgs.h"

TEST(CC_parseCmdLineArgs, NullCmdLineArgs) {
  CC_CmdLineArgs_T CmdLineArgs;
  EXPECT_EQ(CC_FAIL, CC_parseCmdLineArgs(0, NULL, &CmdLineArgs));
}

TEST(CC_parseCmdLineArgs, NullCmdLineArgsPtr) { EXPECT_EQ(CC_FAIL, CC_parseCmdLineArgs(0, NULL, NULL)); }

TEST(CC_parseCmdLineArgs, NoArgs) {
  CC_CmdLineArgs_T CmdLineArgs;
  const char *argv[] = {(char *)"test"};
  EXPECT_EQ(CC_SUCCESS, CC_parseCmdLineArgs(1, argv, &CmdLineArgs));
  EXPECT_FALSE(CmdLineArgs.IsLoggingEnabled);
  EXPECT_EQ(0, CmdLineArgs.RecvPort);
  EXPECT_EQ(NULL, CmdLineArgs.pLogSavingDir);
}

TEST(CC_parseCmdLineArgs, LoggingEnabled) {
  CC_CmdLineArgs_T CmdLineArgs;
  const char *argv[] = {(char *)"test", (char *)"-l"};
  EXPECT_EQ(CC_SUCCESS, CC_parseCmdLineArgs(2, argv, &CmdLineArgs));
  EXPECT_TRUE(CmdLineArgs.IsLoggingEnabled);
  EXPECT_EQ(0, CmdLineArgs.RecvPort);
  EXPECT_EQ(NULL, CmdLineArgs.pLogSavingDir);
}

TEST(CC_parseCmdLineArgs, RecvPort) {
  CC_CmdLineArgs_T CmdLineArgs;
  const char *argv[] = {(char *)"test", (char *)"-p", (char *)"1234"};
  EXPECT_EQ(CC_SUCCESS, CC_parseCmdLineArgs(3, argv, &CmdLineArgs));
  EXPECT_FALSE(CmdLineArgs.IsLoggingEnabled);
  EXPECT_EQ(1234, CmdLineArgs.RecvPort);
  EXPECT_EQ(NULL, CmdLineArgs.pLogSavingDir);
}

TEST(CC_parseCmdLineArgs, LogSavingDir) {
  CC_CmdLineArgs_T CmdLineArgs;
  const char *argv[] = {(char *)"test", (char *)"-d", (char *)"/tmp"};
  EXPECT_EQ(CC_SUCCESS, CC_parseCmdLineArgs(3, argv, &CmdLineArgs));
  EXPECT_FALSE(CmdLineArgs.IsLoggingEnabled);
  EXPECT_EQ(0, CmdLineArgs.RecvPort);
  EXPECT_STREQ("/tmp", CmdLineArgs.pLogSavingDir);
}

TEST(CC_parseCmdLineArgs, AllArgs) {
  CC_CmdLineArgs_T CmdLineArgs;
  const char *argv[] = {(char *)"test", (char *)"-l", (char *)"-p", (char *)"1234", (char *)"-d", (char *)"/tmp"};
  EXPECT_EQ(CC_SUCCESS, CC_parseCmdLineArgs(6, argv, &CmdLineArgs));
  EXPECT_TRUE(CmdLineArgs.IsLoggingEnabled);
  EXPECT_EQ(1234, CmdLineArgs.RecvPort);
  EXPECT_STREQ("/tmp", CmdLineArgs.pLogSavingDir);
}

int main(int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
